
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000226  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000979  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000004f  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000130  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ba  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000017e  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d5  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	7c d0       	rcall	.+248    	; 0x13c <main>
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <InitUART>:
#include <util/delay.h>



void InitUART(uint32_t baud)
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	00 d0       	rcall	.+0      	; 0x4e <InitUART+0x6>
  4e:	00 d0       	rcall	.+0      	; 0x50 <InitUART+0x8>
  50:	00 d0       	rcall	.+0      	; 0x52 <InitUART+0xa>
  52:	cd b7       	in	r28, 0x3d	; 61
  54:	de b7       	in	r29, 0x3e	; 62
  56:	6b 83       	std	Y+3, r22	; 0x03
  58:	7c 83       	std	Y+4, r23	; 0x04
  5a:	8d 83       	std	Y+5, r24	; 0x05
  5c:	9e 83       	std	Y+6, r25	; 0x06
        uint16_t baudrate=(F_CPU/(16*baud))-1;
  5e:	8b 81       	ldd	r24, Y+3	; 0x03
  60:	9c 81       	ldd	r25, Y+4	; 0x04
  62:	ad 81       	ldd	r26, Y+5	; 0x05
  64:	be 81       	ldd	r27, Y+6	; 0x06
  66:	88 0f       	add	r24, r24
  68:	99 1f       	adc	r25, r25
  6a:	aa 1f       	adc	r26, r26
  6c:	bb 1f       	adc	r27, r27
  6e:	88 0f       	add	r24, r24
  70:	99 1f       	adc	r25, r25
  72:	aa 1f       	adc	r26, r26
  74:	bb 1f       	adc	r27, r27
  76:	88 0f       	add	r24, r24
  78:	99 1f       	adc	r25, r25
  7a:	aa 1f       	adc	r26, r26
  7c:	bb 1f       	adc	r27, r27
  7e:	88 0f       	add	r24, r24
  80:	99 1f       	adc	r25, r25
  82:	aa 1f       	adc	r26, r26
  84:	bb 1f       	adc	r27, r27
  86:	9c 01       	movw	r18, r24
  88:	ad 01       	movw	r20, r26
  8a:	80 e4       	ldi	r24, 0x40	; 64
  8c:	92 e4       	ldi	r25, 0x42	; 66
  8e:	af e0       	ldi	r26, 0x0F	; 15
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	bc 01       	movw	r22, r24
  94:	cd 01       	movw	r24, r26
  96:	69 d0       	rcall	.+210    	; 0x16a <__udivmodsi4>
  98:	da 01       	movw	r26, r20
  9a:	c9 01       	movw	r24, r18
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	9a 83       	std	Y+2, r25	; 0x02
  a0:	89 83       	std	Y+1, r24	; 0x01
        /*Set baud rate*/
        UBRRH = (unsigned char)(baudrate>>8);
  a2:	80 e4       	ldi	r24, 0x40	; 64
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	29 81       	ldd	r18, Y+1	; 0x01
  a8:	3a 81       	ldd	r19, Y+2	; 0x02
  aa:	23 2f       	mov	r18, r19
  ac:	33 27       	eor	r19, r19
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
        UBRRL = (unsigned char)baudrate;
  b2:	89 e2       	ldi	r24, 0x29	; 41
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	29 81       	ldd	r18, Y+1	; 0x01
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
        /* Enable Receiver and Transmitter */
        UCSRB = (1<<RXEN)|(1<<TXEN);
  bc:	8a e2       	ldi	r24, 0x2A	; 42
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	28 e1       	ldi	r18, 0x18	; 24
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
        /* Set frame format: 8data, 1stop bit */
        UCSRC = (1<<URSEL)|(3<<UCSZ0);
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	26 e8       	ldi	r18, 0x86	; 134
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18

}
  d0:	26 96       	adiw	r28, 0x06	; 6
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

000000e2 <UARTReceive>:

unsigned char UARTReceive(void)
{
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
        if (UCSRA & (1<<RXC))
  ea:	8b e2       	ldi	r24, 0x2B	; 43
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	2c f4       	brge	.+10     	; 0x100 <UARTReceive+0x1e>
                return UDR;
  f6:	8c e2       	ldi	r24, 0x2C	; 44
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	01 c0       	rjmp	.+2      	; 0x102 <UARTReceive+0x20>
        else    /* no data pending */
                return 0;
 100:	80 e0       	ldi	r24, 0x00	; 0
}
 102:	cf 91       	pop	r28
 104:	df 91       	pop	r29
 106:	08 95       	ret

00000108 <UARTTransmit>:

void UARTTransmit(unsigned char data)
{
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	0f 92       	push	r0
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
        while (!( UCSRA & (1<<UDRE)) );
 114:	00 00       	nop
 116:	8b e2       	ldi	r24, 0x2B	; 43
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	80 72       	andi	r24, 0x20	; 32
 124:	90 70       	andi	r25, 0x00	; 0
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	b1 f3       	breq	.-20     	; 0x116 <UARTTransmit+0xe>
        /* Put data into buffer, sends the data */
        UDR = data;
 12a:	8c e2       	ldi	r24, 0x2C	; 44
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
}
 134:	0f 90       	pop	r0
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <main>:


char c;
int main()
{
 13c:	df 93       	push	r29
 13e:	cf 93       	push	r28
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62

        InitUART(2400);
 144:	60 e6       	ldi	r22, 0x60	; 96
 146:	79 e0       	ldi	r23, 0x09	; 9
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	7d df       	rcall	.-262    	; 0x48 <InitUART>
 14e:	01 c0       	rjmp	.+2      	; 0x152 <main+0x16>
                if (c){

                      UARTTransmit(c+1);
                }

        }
 150:	00 00       	nop
        InitUART(2400);


        while(1){

                c=UARTReceive();
 152:	c7 df       	rcall	.-114    	; 0xe2 <UARTReceive>
 154:	80 93 60 00 	sts	0x0060, r24
                
                if (c){
 158:	80 91 60 00 	lds	r24, 0x0060
 15c:	88 23       	and	r24, r24
 15e:	c1 f3       	breq	.-16     	; 0x150 <main+0x14>

                      UARTTransmit(c+1);
 160:	80 91 60 00 	lds	r24, 0x0060
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	d0 df       	rcall	.-96     	; 0x108 <UARTTransmit>
                }

        }
 168:	f4 cf       	rjmp	.-24     	; 0x152 <main+0x16>

0000016a <__udivmodsi4>:
 16a:	a1 e2       	ldi	r26, 0x21	; 33
 16c:	1a 2e       	mov	r1, r26
 16e:	aa 1b       	sub	r26, r26
 170:	bb 1b       	sub	r27, r27
 172:	fd 01       	movw	r30, r26
 174:	0d c0       	rjmp	.+26     	; 0x190 <__udivmodsi4_ep>

00000176 <__udivmodsi4_loop>:
 176:	aa 1f       	adc	r26, r26
 178:	bb 1f       	adc	r27, r27
 17a:	ee 1f       	adc	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	a2 17       	cp	r26, r18
 180:	b3 07       	cpc	r27, r19
 182:	e4 07       	cpc	r30, r20
 184:	f5 07       	cpc	r31, r21
 186:	20 f0       	brcs	.+8      	; 0x190 <__udivmodsi4_ep>
 188:	a2 1b       	sub	r26, r18
 18a:	b3 0b       	sbc	r27, r19
 18c:	e4 0b       	sbc	r30, r20
 18e:	f5 0b       	sbc	r31, r21

00000190 <__udivmodsi4_ep>:
 190:	66 1f       	adc	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	88 1f       	adc	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	1a 94       	dec	r1
 19a:	69 f7       	brne	.-38     	; 0x176 <__udivmodsi4_loop>
 19c:	60 95       	com	r22
 19e:	70 95       	com	r23
 1a0:	80 95       	com	r24
 1a2:	90 95       	com	r25
 1a4:	9b 01       	movw	r18, r22
 1a6:	ac 01       	movw	r20, r24
 1a8:	bd 01       	movw	r22, r26
 1aa:	cf 01       	movw	r24, r30
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
